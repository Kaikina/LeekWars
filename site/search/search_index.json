{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"POUR COMMENCER \u00b6 Cette librairie a \u00e9t\u00e9 \u00e9crite par Kaikina, actuellement jouant sous le pseudo tgirou . Pour tout signalements de bugs , ou d' am\u00e9liorations , merci d'utiliser les outils Github d\u00e9di\u00e9s. Installation \u00b6 Installation de la d\u00e9pendance AccessibleCells \u00b6 Cr\u00e9ez une nouvelle IA dans LeekWars et nommez-l\u00e0 de la mani\u00e8re souhait\u00e9e. Il est recommand\u00e9 de la nommer AccessibleCells . Copiez le contenu de cette librairie dans l'IA que vous venez de cr\u00e9er. Installation de la librairie Kailib \u00b6 Cr\u00e9ez une nouvelle IA dans le m\u00eame r\u00e9pertoire que sa d\u00e9pendance AccessibleCells . Nommez-la de la mani\u00e8re souhait\u00e9e. Il est recommand\u00e9 de la nommer Kailib . Copiez le contenu de cette librairie dans l'IA que vous venez de cr\u00e9er. Usage \u00b6 Dans l'IA principale de votre poireau, importez la librairie principale . include ( \"Kailib\" ); Vous pouvez maintenant utiliser n'importe quelle fonction de la librairie au sein de l'IA de votre poireau. Exemple : var hasTalked = false ; if ( getAliveEnemiesCount () < 1 ) { sayFinisher (); hasTalked = true ; }","title":"POUR COMMENCER"},{"location":"#pour-commencer","text":"Cette librairie a \u00e9t\u00e9 \u00e9crite par Kaikina, actuellement jouant sous le pseudo tgirou . Pour tout signalements de bugs , ou d' am\u00e9liorations , merci d'utiliser les outils Github d\u00e9di\u00e9s.","title":"POUR COMMENCER"},{"location":"#installation","text":"","title":"Installation"},{"location":"#installation-de-la-dependance-accessiblecells","text":"Cr\u00e9ez une nouvelle IA dans LeekWars et nommez-l\u00e0 de la mani\u00e8re souhait\u00e9e. Il est recommand\u00e9 de la nommer AccessibleCells . Copiez le contenu de cette librairie dans l'IA que vous venez de cr\u00e9er.","title":"Installation de la d\u00e9pendance AccessibleCells"},{"location":"#installation-de-la-librairie-kailib","text":"Cr\u00e9ez une nouvelle IA dans le m\u00eame r\u00e9pertoire que sa d\u00e9pendance AccessibleCells . Nommez-la de la mani\u00e8re souhait\u00e9e. Il est recommand\u00e9 de la nommer Kailib . Copiez le contenu de cette librairie dans l'IA que vous venez de cr\u00e9er.","title":"Installation de la librairie Kailib"},{"location":"#usage","text":"Dans l'IA principale de votre poireau, importez la librairie principale . include ( \"Kailib\" ); Vous pouvez maintenant utiliser n'importe quelle fonction de la librairie au sein de l'IA de votre poireau. Exemple : var hasTalked = false ; if ( getAliveEnemiesCount () < 1 ) { sayFinisher (); hasTalked = true ; }","title":"Usage"},{"location":"FONCTIONS/armes/get-weapon-damages/","text":"getWeaponDamages \u00b6 getWeaponDamages ( weapon , leek , strictMode ); getWeaponDamages( Nombre weapon, Nombre leek, Bool\u00e9en strictMode) --> Nombre damages Retourne les d\u00e9g\u00e2ts qu'occasionnera l'utilisation de l'arme weapon sur le poireau leek . Toutes les r\u00e9sistances de la cible et votre force actuelle sont pris en compte. Param\u00e8tres weapon : L'arme qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que la puce tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour damages : Le montant des d\u00e9g\u00e2ts qui sera inflig\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de l'arme, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie un nombre et que l'arme n'occasionne pas le m\u00eame montant de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain d'occasionner au minimum les d\u00e9g\u00e2ts retourn\u00e9s, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Arme Magnum ( WEAPON_MAGNUM ), inflige 25 \u00e0 40 de d\u00e9g\u00e2ts et a une moyenne de 32.5 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre arme va infliger des d\u00e9g\u00e2ts afin de savoir si elle vaut le coup de l'utiliser. var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( getWeaponDamages ( myWeapon , nearestEnemy , false ) > 0 ) { useWeapon ( myWeapon , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( getWeaponDamages ( myWeapon , nearestEnemy , true ) > 0 ) { // On s'assure qu'on ne tapera jamais 0. useWeapon ( myWeapon , nearestEnemy ); }","title":"getWeaponDamages"},{"location":"FONCTIONS/armes/get-weapon-damages/#getweapondamages","text":"getWeaponDamages ( weapon , leek , strictMode ); getWeaponDamages( Nombre weapon, Nombre leek, Bool\u00e9en strictMode) --> Nombre damages Retourne les d\u00e9g\u00e2ts qu'occasionnera l'utilisation de l'arme weapon sur le poireau leek . Toutes les r\u00e9sistances de la cible et votre force actuelle sont pris en compte. Param\u00e8tres weapon : L'arme qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que la puce tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour damages : Le montant des d\u00e9g\u00e2ts qui sera inflig\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de l'arme, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie un nombre et que l'arme n'occasionne pas le m\u00eame montant de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain d'occasionner au minimum les d\u00e9g\u00e2ts retourn\u00e9s, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Arme Magnum ( WEAPON_MAGNUM ), inflige 25 \u00e0 40 de d\u00e9g\u00e2ts et a une moyenne de 32.5 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre arme va infliger des d\u00e9g\u00e2ts afin de savoir si elle vaut le coup de l'utiliser. var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( getWeaponDamages ( myWeapon , nearestEnemy , false ) > 0 ) { useWeapon ( myWeapon , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( getWeaponDamages ( myWeapon , nearestEnemy , true ) > 0 ) { // On s'assure qu'on ne tapera jamais 0. useWeapon ( myWeapon , nearestEnemy ); }","title":"getWeaponDamages"},{"location":"FONCTIONS/armes/weapon-will-kill/","text":"weaponWillKill \u00b6 weaponWillKill ( weapon , leek , strictMode ); weaponWillKill( Nombre weapon, Nombre leek, Bool\u00e9en strictMode) --> Bool\u00e9en willKill D\u00e9termine si l'usage de l'arme weapon va tuer le poireau d'id leek . Toutes les r\u00e9sistances de l'ennemi et votre force actuelle sont pris en compte. Param\u00e8tres weapon : L'arme qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que l'arme tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour willKill : vrai si le poireau leek sera tu\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de l'arme, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie true et que l'arme ne tue pas l'ennemi si vous sortez un jet de d\u00e9g\u00e2ts inf\u00e9rieur \u00e0 la moyenne de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain de tuer l'ennemi quoi qu'il arrive, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Arme Magnum ( WEAPON_MAGNUM ), inflige 25 \u00e0 40 de d\u00e9g\u00e2ts et a une moyenne de 32.5 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre puce peut tuer l'ennemi afin de ne pas vous soigner inutilement. var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( weaponWillKill ( myWeapon , nearestEnemy , false )) { // On admet une marge d'erreur li\u00e9e \u00e0 l'al\u00e9atoire des d\u00e9g\u00e2ts. useWeapon ( myWeapon , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( weaponWillKill ( myWeapon , nearestEnemy , true )) { // On ne permet aucune erreur possible quant au r\u00e9sultat. useWeapon ( myWeapon , nearestEnemy ); }","title":"weaponWillKill"},{"location":"FONCTIONS/armes/weapon-will-kill/#weaponwillkill","text":"weaponWillKill ( weapon , leek , strictMode ); weaponWillKill( Nombre weapon, Nombre leek, Bool\u00e9en strictMode) --> Bool\u00e9en willKill D\u00e9termine si l'usage de l'arme weapon va tuer le poireau d'id leek . Toutes les r\u00e9sistances de l'ennemi et votre force actuelle sont pris en compte. Param\u00e8tres weapon : L'arme qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que l'arme tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour willKill : vrai si le poireau leek sera tu\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de l'arme, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie true et que l'arme ne tue pas l'ennemi si vous sortez un jet de d\u00e9g\u00e2ts inf\u00e9rieur \u00e0 la moyenne de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain de tuer l'ennemi quoi qu'il arrive, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Arme Magnum ( WEAPON_MAGNUM ), inflige 25 \u00e0 40 de d\u00e9g\u00e2ts et a une moyenne de 32.5 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre puce peut tuer l'ennemi afin de ne pas vous soigner inutilement. var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( weaponWillKill ( myWeapon , nearestEnemy , false )) { // On admet une marge d'erreur li\u00e9e \u00e0 l'al\u00e9atoire des d\u00e9g\u00e2ts. useWeapon ( myWeapon , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); var myWeapon = getWeapon (); if ( weaponWillKill ( myWeapon , nearestEnemy , true )) { // On ne permet aucune erreur possible quant au r\u00e9sultat. useWeapon ( myWeapon , nearestEnemy ); }","title":"weaponWillKill"},{"location":"FONCTIONS/combat/get-allies-in-range/","text":"getAlliesInRange \u00b6 getAlliesInRange ( range , cell ); getAlliesInRange( Nombre range, Nombre cell) --> TableauDeNombres alliesInRange Retourne un tableau contenant les ids des alli\u00e9s \u00e9tant \u00e0 une port\u00e9e range depuis la cellule cell . Param\u00e8tres range : La port\u00e9e dans laquelle chercher. cell : La cellule depuis laquelle chercher. Retour enemiesInRange : Le tableau contenant les ids des alli\u00e9s \u00e9tant \u00e0 port\u00e9e depuis la cellule. Op\u00e9rations variables Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer tous les alli\u00e9s \u00e0 port\u00e9e pour ensuite d\u00e9cider sur lequel concentrer vos soins/boosts. var allies = getAlliesInRange ( 13 , getCell ());","title":"getAlliesInRange"},{"location":"FONCTIONS/combat/get-allies-in-range/#getalliesinrange","text":"getAlliesInRange ( range , cell ); getAlliesInRange( Nombre range, Nombre cell) --> TableauDeNombres alliesInRange Retourne un tableau contenant les ids des alli\u00e9s \u00e9tant \u00e0 une port\u00e9e range depuis la cellule cell . Param\u00e8tres range : La port\u00e9e dans laquelle chercher. cell : La cellule depuis laquelle chercher. Retour enemiesInRange : Le tableau contenant les ids des alli\u00e9s \u00e9tant \u00e0 port\u00e9e depuis la cellule. Op\u00e9rations variables Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer tous les alli\u00e9s \u00e0 port\u00e9e pour ensuite d\u00e9cider sur lequel concentrer vos soins/boosts. var allies = getAlliesInRange ( 13 , getCell ());","title":"getAlliesInRange"},{"location":"FONCTIONS/combat/get-enemies-in-range/","text":"getEnemiesInRange \u00b6 getEnemiesInRange ( range , cell ); getEnemiesInRange( Nombre range, Nombre cell) --> TableauDeNombres enemiesInRange Retourne un tableau contenant les ids des ennemis \u00e9tant \u00e0 une port\u00e9e range depuis la cellule cell . Param\u00e8tres range : La port\u00e9e dans laquelle chercher. cell : La cellule depuis laquelle chercher. Retour enemiesInRange : Le tableau contenant les ids des ennemis \u00e9tant \u00e0 port\u00e9e depuis la cellule. Op\u00e9rations variables Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer tous les ennemis \u00e0 port\u00e9e pour ensuite d\u00e9cider sur lequel concentrer vos attaques. var enemies = getEnemiesInRange ( 13 , getCell ());","title":"getEnemiesInRange"},{"location":"FONCTIONS/combat/get-enemies-in-range/#getenemiesinrange","text":"getEnemiesInRange ( range , cell ); getEnemiesInRange( Nombre range, Nombre cell) --> TableauDeNombres enemiesInRange Retourne un tableau contenant les ids des ennemis \u00e9tant \u00e0 une port\u00e9e range depuis la cellule cell . Param\u00e8tres range : La port\u00e9e dans laquelle chercher. cell : La cellule depuis laquelle chercher. Retour enemiesInRange : Le tableau contenant les ids des ennemis \u00e9tant \u00e0 port\u00e9e depuis la cellule. Op\u00e9rations variables Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer tous les ennemis \u00e0 port\u00e9e pour ensuite d\u00e9cider sur lequel concentrer vos attaques. var enemies = getEnemiesInRange ( 13 , getCell ());","title":"getEnemiesInRange"},{"location":"FONCTIONS/combat/get-less-health-leek/","text":"getLessHealthLeek \u00b6 getLessHealthLeek ( leeks ); getLessHealthLeek( TableauDeNombres leeks) --> Nombre leek Retourne l'id du poireau ayant le moins de vie parmi les poireaux leeks . Param\u00e8tres leeks : Les ids des poireaux \u00e0 analyser. Retour leek : L'id du poireau ayant le moins de vie. Op\u00e9rations variables Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer l'alli\u00e9 qui a le moins de vie afin de le soigner en priorit\u00e9. var allies = getAlliesInRange ( 13 , getCell ()); var allyToHeal = getLessHealthLeek ( allies );","title":"getLessHealthLeek"},{"location":"FONCTIONS/combat/get-less-health-leek/#getlesshealthleek","text":"getLessHealthLeek ( leeks ); getLessHealthLeek( TableauDeNombres leeks) --> Nombre leek Retourne l'id du poireau ayant le moins de vie parmi les poireaux leeks . Param\u00e8tres leeks : Les ids des poireaux \u00e0 analyser. Retour leek : L'id du poireau ayant le moins de vie. Op\u00e9rations variables Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer l'alli\u00e9 qui a le moins de vie afin de le soigner en priorit\u00e9. var allies = getAlliesInRange ( 13 , getCell ()); var allyToHeal = getLessHealthLeek ( allies );","title":"getLessHealthLeek"},{"location":"FONCTIONS/poireaux/leek-has-effect/","text":"leekHasEffect \u00b6 leekHasEffect ( leek , effectType ); leekHasEffect( Nombre leek, Nombre effectType) --> Bool\u00e9en hasEffect D\u00e9termine si le poireau leek a un effet de type effectType . Param\u00e8tres leek : L'id du poireau \u00e0 analyser. effectType : Le type d'effet \u00e0 rechercher. Retour hasEffect : vrai si le poireau leek poss\u00e8de un effet de type effectType . Op\u00e9rations variables Exemple d'utilisation Vous pouvez v\u00e9rifier si un poireau a un poison ou un d\u00e9buf sur lui pour le clean de ses effets. var allyHasPoison = leekHasEffect ( EFFECT_POISON , getNearestAlly ());","title":"leekHasEffect"},{"location":"FONCTIONS/poireaux/leek-has-effect/#leekhaseffect","text":"leekHasEffect ( leek , effectType ); leekHasEffect( Nombre leek, Nombre effectType) --> Bool\u00e9en hasEffect D\u00e9termine si le poireau leek a un effet de type effectType . Param\u00e8tres leek : L'id du poireau \u00e0 analyser. effectType : Le type d'effet \u00e0 rechercher. Retour hasEffect : vrai si le poireau leek poss\u00e8de un effet de type effectType . Op\u00e9rations variables Exemple d'utilisation Vous pouvez v\u00e9rifier si un poireau a un poison ou un d\u00e9buf sur lui pour le clean de ses effets. var allyHasPoison = leekHasEffect ( EFFECT_POISON , getNearestAlly ());","title":"leekHasEffect"},{"location":"FONCTIONS/puces/chip-will-kill/","text":"chipWillKill \u00b6 chipWillKill ( chip , leek , strictMode ); chipWillKill( Nombre chip, Nombre leek, Bool\u00e9en strictMode) --> Bool\u00e9en willKill D\u00e9termine si l'usage de la puce chip va tuer le poireau d'id leek . Toutes les r\u00e9sistances de l'ennemi et votre force actuelle sont pris en compte. Param\u00e8tres chip : La puce qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que la puce tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour willKill : vrai si le poireau leek sera tu\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de la puce, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie true et que la puce ne tue pas l'ennemi si vous sortez un jet de d\u00e9g\u00e2ts inf\u00e9rieur \u00e0 la moyenne de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain de tuer l'ennemi quoi qu'il arrive, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Puce Caillou ( CHIP_PEBBLE ), inflige 2 \u00e0 34 de d\u00e9g\u00e2ts et a une moyenne de 18 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre puce peut tuer l'ennemi afin de ne pas vous soigner inutilement. var nearestEnemy = getNearestEnemy (); if ( chipWillKill ( CHIP_ROCK , nearestEnemy , false )) { // On admet une marge d'erreur li\u00e9e \u00e0 l'al\u00e9atoire des d\u00e9g\u00e2ts. useChip ( CHIP_ROCK , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); if ( chipWillKill ( CHIP_ROCK , nearestEnemy , true )) { // On ne permet aucune erreur possible quant au r\u00e9sultat. useChip ( CHIP_ROCK , nearestEnemy ); }","title":"chipWillKill"},{"location":"FONCTIONS/puces/chip-will-kill/#chipwillkill","text":"chipWillKill ( chip , leek , strictMode ); chipWillKill( Nombre chip, Nombre leek, Bool\u00e9en strictMode) --> Bool\u00e9en willKill D\u00e9termine si l'usage de la puce chip va tuer le poireau d'id leek . Toutes les r\u00e9sistances de l'ennemi et votre force actuelle sont pris en compte. Param\u00e8tres chip : La puce qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que la puce tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour willKill : vrai si le poireau leek sera tu\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de la puce, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie true et que la puce ne tue pas l'ennemi si vous sortez un jet de d\u00e9g\u00e2ts inf\u00e9rieur \u00e0 la moyenne de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain de tuer l'ennemi quoi qu'il arrive, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Puce Caillou ( CHIP_PEBBLE ), inflige 2 \u00e0 34 de d\u00e9g\u00e2ts et a une moyenne de 18 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre puce peut tuer l'ennemi afin de ne pas vous soigner inutilement. var nearestEnemy = getNearestEnemy (); if ( chipWillKill ( CHIP_ROCK , nearestEnemy , false )) { // On admet une marge d'erreur li\u00e9e \u00e0 l'al\u00e9atoire des d\u00e9g\u00e2ts. useChip ( CHIP_ROCK , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); if ( chipWillKill ( CHIP_ROCK , nearestEnemy , true )) { // On ne permet aucune erreur possible quant au r\u00e9sultat. useChip ( CHIP_ROCK , nearestEnemy ); }","title":"chipWillKill"},{"location":"FONCTIONS/puces/get-chip-damages/","text":"getChipDamages \u00b6 getChipDamages ( chip , leek , strictMode ); getChipDamages( Nombre chip, Nombre leek, Bool\u00e9en strictMode) --> Nombre damages Retourne les d\u00e9g\u00e2ts qu'occasionnera l'utilisation de la puce chip sur le poireau leek . Toutes les r\u00e9sistances de la cible et votre force actuelle sont pris en compte. Param\u00e8tres chip : La puce qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que la puce tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour damages : Le montant des d\u00e9g\u00e2ts qui sera inflig\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de la puce, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie un nombre et que la puce n'occasionne pas le m\u00eame montant de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain d'occasionner au minimum les d\u00e9g\u00e2ts retourn\u00e9s, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Puce Caillou ( CHIP_PEBBLE ), inflige 2 \u00e0 34 de d\u00e9g\u00e2ts et a une moyenne de 18 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre puce va infliger des d\u00e9g\u00e2ts afin de savoir si elle vaut le coup de l'utiliser. var nearestEnemy = getNearestEnemy (); if ( getChipDamages ( CHIP_SPARK , nearestEnemy , false ) > 0 ) { useChip ( CHIP_SPARK , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); if ( getChipDamages ( CHIP_SPARK , nearestEnemy , true ) > 0 ) { // On s'assure qu'on ne tapera jamais 0. useChip ( CHIP_SPARK , nearestEnemy ); }","title":"getChipDamages"},{"location":"FONCTIONS/puces/get-chip-damages/#getchipdamages","text":"getChipDamages ( chip , leek , strictMode ); getChipDamages( Nombre chip, Nombre leek, Bool\u00e9en strictMode) --> Nombre damages Retourne les d\u00e9g\u00e2ts qu'occasionnera l'utilisation de la puce chip sur le poireau leek . Toutes les r\u00e9sistances de la cible et votre force actuelle sont pris en compte. Param\u00e8tres chip : La puce qui va \u00eatre utilis\u00e9e. leek : L'id du poireau cibl\u00e9 par la puce chip . strictMode : Vrai si vous souhaitez \u00eatre certain \u00e0 100% que la puce tue l'ennemi, ou faux si vous admettez une marge d'erreur (al\u00e9atoire des d\u00e9g\u00e2ts). Retour damages : Le montant des d\u00e9g\u00e2ts qui sera inflig\u00e9. Op\u00e9rations variables Note importante Pour calculer les d\u00e9g\u00e2ts de la puce, la moyenne des d\u00e9g\u00e2ts est utilis\u00e9e. Il se peut donc que cette fonction renvoie un nombre et que la puce n'occasionne pas le m\u00eame montant de d\u00e9g\u00e2ts. Si vous souhaitez \u00eatre certain d'occasionner au minimum les d\u00e9g\u00e2ts retourn\u00e9s, utilisez le strict mode, en passant ce param\u00e8tre \u00e0 true. Exemple : Puce Caillou ( CHIP_PEBBLE ), inflige 2 \u00e0 34 de d\u00e9g\u00e2ts et a une moyenne de 18 de d\u00e9g\u00e2ts. Exemple d'utilisation Vous pouvez calculer si votre puce va infliger des d\u00e9g\u00e2ts afin de savoir si elle vaut le coup de l'utiliser. var nearestEnemy = getNearestEnemy (); if ( getChipDamages ( CHIP_SPARK , nearestEnemy , false ) > 0 ) { useChip ( CHIP_SPARK , nearestEnemy ); } var nearestEnemy = getNearestEnemy (); if ( getChipDamages ( CHIP_SPARK , nearestEnemy , true ) > 0 ) { // On s'assure qu'on ne tapera jamais 0. useChip ( CHIP_SPARK , nearestEnemy ); }","title":"getChipDamages"},{"location":"FONCTIONS/terrain/get-moves/","text":"getMoves \u00b6 getMoves ( cell , mp ); getMoves( Nombre cell, Nombre mp) --> TableauDeNombres cells Retourne un tableau de cellules ateignables depuis la cellule cell avec un nombre de points de mouvements mp . Les cellules contenant des obstacles ou des leeks ne sont pas retourn\u00e9es. Param\u00e8tres cell : La cellule \u00e0 partir de laquelle rechercher des cellules disponibles. mp : Le nombre de points de mouvements disponibles. Retour cells : Le tableau contenant les ids de toutes les cellules atteignables depuis la cellule cell . Op\u00e9rations variables Attention Afin de faire fonctionner cette fonction il faut absolument placer tout en haut de votre IA, apr\u00e8s l'import de la librairie le code ci-dessous. if ( getTurn () === 1 ) { init (); } beginTurn (); Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer toutes les cellules o\u00f9 votre poireau peut se rendre afin de calculer plus tard les cellules o\u00f9 vous pourrez vous cacher. var availableCells = getMoves ( getCell (), getMP ());","title":"getMoves"},{"location":"FONCTIONS/terrain/get-moves/#getmoves","text":"getMoves ( cell , mp ); getMoves( Nombre cell, Nombre mp) --> TableauDeNombres cells Retourne un tableau de cellules ateignables depuis la cellule cell avec un nombre de points de mouvements mp . Les cellules contenant des obstacles ou des leeks ne sont pas retourn\u00e9es. Param\u00e8tres cell : La cellule \u00e0 partir de laquelle rechercher des cellules disponibles. mp : Le nombre de points de mouvements disponibles. Retour cells : Le tableau contenant les ids de toutes les cellules atteignables depuis la cellule cell . Op\u00e9rations variables Attention Afin de faire fonctionner cette fonction il faut absolument placer tout en haut de votre IA, apr\u00e8s l'import de la librairie le code ci-dessous. if ( getTurn () === 1 ) { init (); } beginTurn (); Exemple d'utilisation Vous pouvez r\u00e9cup\u00e9rer toutes les cellules o\u00f9 votre poireau peut se rendre afin de calculer plus tard les cellules o\u00f9 vous pourrez vous cacher. var availableCells = getMoves ( getCell (), getMP ());","title":"getMoves"}]}